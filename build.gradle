/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
  id "com.diffplug.gradle.spotless" version "4.3.0"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.diffplug.gradle.spotless'

    repositories {
        mavenCentral()
    }

    spotless {
		java {
            eclipse().configFile(rootProject.file('formatter-settings.xml'))
		}
    }

    sourceSets {
        main.java.srcDirs = ['src/main/java']
        test.java.srcDirs = ['src/test/java']
    }
}

project(':gallifrey:core') {
    dependencies {
        implementation fileTree(dir: '../../lib', include: ['*.jar'])

        testImplementation 'junit:junit:4.13'
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.3.1'
    }
}

project(':gallifrey:backend') {
    dependencies {
        implementation fileTree(dir: '../../lib', include: ['*.jar'])
        implementation project(':gallifrey:core')

        testImplementation 'junit:junit:4.13'
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.3.1'
        runtime files(String.valueOf(System.getenv('EXTERNAL_CLASSES')))
    }

    task execute(type:JavaExec) {
/*         doFirst{
            sourceSets.main.runtimeClasspath.each { println it}
            println String.valueOf(System.getenv('EXTERNAL_CLASSES'))
        } */
        enableAssertions = true
/*         jvmArgs = ['-XX:+UseSerialGC'] */
        jvmArgs = ['-XX:+UseG1GC']

        main = project.hasProperty("mainClass") ? getProperty("mainClass") : "NULL"
        classpath = sourceSets.main.runtimeClasspath
    }
}

project(':gallifrey:frontend') {
    dependencies {
        implementation fileTree(dir: '../../lib', include: ['*.jar'])
        implementation project(':gallifrey:core')

        testImplementation 'junit:junit:4.13'
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.3.1'
    }

    task execute(type:JavaExec) {
        enableAssertions = true

        main = project.hasProperty("mainClass") ? getProperty("mainClass") : "NULL"
        classpath = sourceSets.main.runtimeClasspath
    }
}